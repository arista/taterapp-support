{
  "version": 3,
  "sources": ["../../src/lib/utils/Utils.ts", "../../src/lib/utils/cdk/CDKUtils.ts", "../../src/lib/utils/cdk/CDKPermissionsUtils.ts", "../../src/lib/utils/cdk/CDKResourcesUtils.ts", "../../src/lib/utils/cdk/CDKRecipes.ts"],
  "sourcesContent": ["import {packageDirectorySync} from \"pkg-dir\"\nimport * as url from \"node:url\"\nimport child_process from \"node:child_process\"\nimport fs from \"node:fs\"\n\nexport function notNull<T>(val: T | null | undefined, str?: string): T {\n  if (val == null) {\n    if (str == null) {\n      throw new Error(`Assertion failed: value is null`)\n    } else {\n      throw new Error(`Assertion failed: value is null: ${str}`)\n    }\n  }\n  return val\n}\n\n// Returns the package directory for the file with the given\n// import.meta.url\nexport function appPkgDir(importMetaUrl: string): string {\n  const __filename = url.fileURLToPath(importMetaUrl)\n  return notNull(packageDirectorySync({cwd: __filename}))\n}\n\nexport function mapWithIndex<T, R>(\n  items: Iterable<T>,\n  f: (item: T, index: number) => R\n): Array<R> {\n  const ret: Array<R> = []\n  let i = 0\n  for (const item of items) {\n    ret.push(f(item, i))\n    i += 1\n  }\n  return ret\n}\n\nexport async function runShellCommand({\n  command,\n  args,\n  cwd,\n  env,\n  shell,\n}: {\n  command: string\n  args: Array<string>\n  cwd?: string\n  env?: {[name: string]: string}\n  shell?: boolean | string\n}): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const proc = child_process.spawn(command, args, {\n      cwd,\n      env,\n      // Use the same stdin, stdout, stderr as this process\n      stdio: \"inherit\",\n      shell,\n    })\n    proc.on(\"exit\", (code: number | null, signal: string | null) => {\n      if (code === 0) {\n        resolve()\n      } else if (code != null) {\n        reject(new Error(`Process exitted with non-zero code \"${code}\"`))\n      } else if (signal != null) {\n        reject(new Error(`Process terminated with signal \"${signal}\"`))\n      } else {\n        reject(new Error(`Process exitted with no exit code or signal`))\n      }\n    })\n    proc.on(\"error\", (err: Error) => {\n      reject(err)\n    })\n  })\n}\n\nexport function fileExists(path: string): boolean {\n  try {\n    fs.statSync(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport function fileLastModified(path: string): number {\n  return fs.statSync(path).mtimeMs\n}\n\nexport function dateToYYYYMMDDHHMMSS(d: Date = new Date()): string {\n  const yyyy = d.getFullYear().toString().padStart(4, \"0\")\n  const mm = (d.getMonth() + 1).toString().padStart(2, \"0\")\n  const dd = d.getDate().toString().padStart(2, \"0\")\n  const h = d.getHours().toString().padStart(2, \"0\")\n  const m = d.getMinutes().toString().padStart(2, \"0\")\n  const s = d.getSeconds().toString().padStart(2, \"0\")\n  return `${yyyy}-${mm}-${dd}-${h}${m}${s}`\n}\n\nexport function getPathToRoot(path: string): string {\n  if (path.startsWith(\"/\")) {\n    path = path.substring(1)\n  }\n  let ret = \"\"\n  for (const c of path) {\n    if (c === \"/\") {\n      ret += \"../\"\n    }\n  }\n  return ret\n}\n", "import {Construct, IConstruct} from \"constructs\"\nimport * as cdk from \"aws-cdk-lib\"\nimport * as Utils from \"../Utils\"\nimport {CDKPermissionsUtils} from \"./CDKPermissionsUtils\"\nimport {CDKResourcesUtils} from \"./CDKResourcesUtils\"\nimport {CDKRecipes} from \"./CDKRecipes\"\n\nexport class CDKUtils {\n  constructor(\n    public props: {\n      scope: IConstruct\n    }\n  ) {}\n\n  get scope() {\n    return this.props.scope\n  }\n\n  _permissions: CDKPermissionsUtils | null = null\n  get permissions(): CDKPermissionsUtils {\n    return (this._permissions ||= (() => {\n      return new CDKPermissionsUtils()\n    })())\n  }\n\n  _resources: CDKResourcesUtils | null = null\n  get resources(): CDKResourcesUtils {\n    return (this._resources ||= (() => {\n      return new CDKResourcesUtils({\n        scope: this.scope,\n      })\n    })())\n  }\n\n  _recipes: CDKRecipes | null = null\n  get recipes(): CDKRecipes {\n    return (this._recipes ||= (() => {\n      return new CDKRecipes()\n    })())\n  }\n\n  static async runCDKCommand<P extends Object>({\n    appPkgDir,\n    appClass,\n    cdkCommand,\n    stackProps,\n  }: {\n    appPkgDir: string\n    appClass: string\n    cdkCommand: string\n    stackProps: P\n  }): Promise<void> {\n    // This assumes that all the devops-utils code has been rolled up\n    // into build/rollup/index.cjs\n    const nodeFile = `${appPkgDir}/dist/lib/lib.es.js`\n    const nodeCommand = `node -e \"import('${nodeFile}').then(i=>i.${appClass}.runCDKStack())\"`\n    const timestamp = Utils.dateToYYYYMMDDHHMMSS()\n    const cdkOutputDir = `${appPkgDir}/build/cdk.out/${appClass}/${timestamp}`\n\n    const command = \"npx\"\n    const shell = false\n\n    const stackPropsJson: string = JSON.stringify(stackProps)\n    const env: {[name: string]: string} = {\n      CDK_PROPS: stackPropsJson,\n      ...process.env,\n    }\n\n    const args = []\n    args.push(`cdk`)\n    args.push(`--app`, nodeCommand)\n    args.push(`-o`, cdkOutputDir)\n    args.push(cdkCommand)\n    // Don't ask for approval (usually would ask for security-related\n    // changes, like security groups)\n    args.push(`--require-approval`, `never`)\n    // Force a redeploy, even if the template is the same\n    args.push(`--force`)\n    //args.push(`--progress`, `events`)\n\n    return await Utils.runShellCommand({\n      command,\n      args,\n      env,\n      shell,\n      cwd: appPkgDir,\n    })\n  }\n\n  static runCDKStack<P>({\n    getStackName,\n    buildStack,\n  }: {\n    getStackName: ({stackProps}: {stackProps: P}) => string\n    buildStack: ({\n      parent,\n      stackProps,\n    }: {\n      parent: IConstruct\n      stackProps: P\n    }) => void\n  }) {\n    const env = JSON.parse(Utils.notNull(process.env[\"CDK_PROPS\"]))\n    const stackProps: P = env\n    const stackName = getStackName({stackProps})\n    const app = new cdk.App()\n    const stack = new cdk.Stack(app, stackName, {\n      // This enables things like looking up hostnames.  Note that\n      // these don't have to be defined as environment variables - CDK\n      // will figure them out itself based on the AWS configuration\n      env: {\n        account: process.env[\"CDK_DEFAULT_ACCOUNT\"],\n        region: process.env[\"CDK_DEFAULT_REGION\"],\n      },\n    })\n    buildStack({parent: stack, stackProps})\n  }\n\n  //--------------------------------------------------\n}\n", "import * as iam from \"aws-cdk-lib/aws-iam\"\nimport * as s3 from \"aws-cdk-lib/aws-s3\"\nimport * as ecr from \"aws-cdk-lib/aws-ecr\"\n\nexport type IamPermissions = Array<IamPermission>\n\nexport interface IamPermission {\n  actions: Array<string>\n  resources?: Array<string>\n}\n\nexport class CDKPermissionsUtils {\n  addToRole(role: iam.IRole, permissions: IamPermissions) {\n    for (const permission of permissions) {\n      const policyStatement = new iam.PolicyStatement()\n      policyStatement.addActions(...permission.actions)\n      if (permission.resources != null) {\n        policyStatement.addResources(...permission.resources)\n      }\n      role.addToPrincipalPolicy(policyStatement)\n    }\n  }\n\n  toCreateAndDeleteSqsQueues(): IamPermissions {\n    return [\n      {\n        actions: [\"sqs:CreateQueue\", \"sqs:DeleteQueue\"],\n        resources: [\"arn:aws:sqs:*\"],\n      },\n    ]\n  }\n\n  toReadAndWriteSqsQueues(): IamPermissions {\n    return [\n      {\n        actions: [\"sqs:ReceiveMessage\", \"sqs:DeleteMessage\", \"sqs:SendMessage\"],\n        resources: [\"arn:aws:sqs:*\"],\n      },\n    ]\n  }\n\n  toReadAndWriteS3Bucket(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\n          \"s3:PutObject\",\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:GetObjectAttributes\",\n          // Needed for writing a large file with s3 cp\n          \"s3:AbortMultipartUpload\",\n          \"s3:ListMultipartUploadParts\",\n          \"s3:ListBucketMultipartUploads\",\n          // Needed for copying a large file within s3\n          \"s3:PutObjectTagging\",\n          \"s3:GetObjectTagging\",\n          \"s3:GetObjectVersion\",\n          \"s3:GetObjectVersionTagging\",\n        ],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toReadS3Bucket(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:GetObjectAttributes\",\n          \"s3:GetObjectTagging\",\n          \"s3:GetObjectVersion\",\n          \"s3:GetObjectVersionTagging\",\n        ],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toWriteS3BucketObjects(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toPullECRImages(): IamPermissions {\n    return [\n      {\n        actions: [\n          \"ecr:BatchCheckLayerForAvailability\",\n          \"ecr:BatchGetImage\",\n          \"ecr:GetDownloadUrlForLayer\",\n        ],\n        resources: [\"*\"],\n      },\n    ]\n  }\n\n  toUseCDK(): IamPermissions {\n    // The CDK system operates a little differently from other\n    // permissions.  Wnen you start developing with CDK, you do an\n    // initial \"cdk bootstrap\".  This creates a set of roles in your\n    // account that effectively have administrator access, able to\n    // access everything.  When running CDK, you need to be able to\n    // assume those roles, since a CDK stack could be touching\n    // anything in AWS.\n    //\n    // See https://stackoverflow.com/questions/57118082/what-iam-permissions-are-needed-to-use-cdk-deploy\n    return [\n      {\n        actions: [\"sts:AssumeRole\"],\n        resources: [\"arn:aws:iam::*:role/cdk-*\"],\n      },\n      {\n        actions: [\"sts:PassRole\"],\n        resources: [\"*\"],\n      },\n      // Taking down a CDK stack (effectively a cloudformation stack)\n      // requires a separate permission\n      {\n        actions: [\"cloudformation:DeleteStack\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toReadCDKOutputs(): IamPermissions {\n    return [\n      {\n        actions: [\"cloudformation:DescribeStacks\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toLoginToECR(): IamPermissions {\n    return [\n      {\n        actions: [\"ecr:GetAuthorizationToken\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toPushToECR(repositories: Array<ecr.IRepository>): IamPermissions {\n    return [\n      {\n        actions: [\n          \"ecr:CompleteLayerUpload\",\n          \"ecr:UploadLayerPart\",\n          \"ecr:InitiateLayerUpload\",\n          \"ecr:BatchCheckLayerAvailability\",\n          \"ecr:PutImage\",\n        ],\n        resources: repositories.map((r) => r.repositoryArn),\n      },\n    ]\n  }\n\n  toUpdateLambdaCode(functionName: string): IamPermissions {\n    return [\n      {\n        actions: [\"lambda:UpdateFunctionCode\", \"lambda:GetFunction\"],\n        resources: [`arn:aws:lambda:*:*:function:${functionName}`],\n      },\n    ]\n  }\n}\n", "import {IConstruct} from \"constructs\"\nimport * as ssm from \"aws-cdk-lib/aws-ssm\"\nimport * as cdk from \"aws-cdk-lib\"\n\nexport class CDKResourcesUtils {\n  constructor(\n    public props: {\n      scope: IConstruct\n    }\n  ) {}\n\n  get scope() {\n    return this.props.scope\n  }\n\n  _ssmStringParams: CachedResources<string> | null = null\n  get ssmStringParams(): CachedResources<string> {\n    return (this._ssmStringParams ||= (() => {\n      return new CachedResources((name) => {\n        return ssm.StringParameter.valueForStringParameter(this.scope, name)\n      })\n    })())\n  }\n\n  _ssmSecureStringParams: CachedResources<string> | null = null\n  get ssmSecureStringParams(): CachedResources<string> {\n    return (this._ssmSecureStringParams ||= (() => {\n      return new CachedResources((name) => {\n        // The version must be specified for secure SSM params, and\n        // must be changed if the value changes\n        const version = 1\n        return ssm.StringParameter.valueForSecureStringParameter(\n          this.scope,\n          `ssm-secureparam-${name}`,\n          version\n        )\n      })\n    })())\n  }\n\n  // Returns the token corresponding to the name of the S3 bucket used\n  // to hold codepipeline artifacts\n  get artifactBucketName() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/artifact-bucket-name\"\n    )\n  }\n\n  // Returns the token corresponding to the codeconnection arn used to\n  // interact with github\n  get codestarConnectionArn() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/codestar-connection-arn\"\n    )\n  }\n\n  // Returns the token corresponding to the dockerhub login used to\n  // pull base images when building docker images.  Using a login\n  // helps with the dockerhub rate limits.\n  get dockerhubAccountId() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/dockerhub-account/id\"\n    )\n  }\n\n  // Returns the token corresponding to the dockerhub password for the\n  // dockerhubAccountId\n  get dockerhubAccountPassword() {\n    return this.ssmSecureStringParams.get(\n      \"/taterapps/common/build/dockerhub-account/password\"\n    )\n  }\n}\n\nclass CachedResources<T> {\n  byName: {[name: string]: T} = {}\n  constructor(public createFunc: (name: string) => T) {}\n  get(name: string): T {\n    return (this.byName[name] ||= (() => this.createFunc(name))())\n  }\n}\n", "import {Construct} from \"constructs\"\nimport * as cdk from \"aws-cdk-lib\"\nimport * as s3 from \"aws-cdk-lib/aws-s3\"\n\nexport class CDKRecipes {\n  constructor() {}\n  \n  s3Bucket(scope: Construct, id: string, props: S3BucketProps) {\n    const {name, isPublic, isHostable, removePolicy} = props\n    const access = isPublic ? {\n      publicReadAccess: true,\n      blockPublicAccess: new s3.BlockPublicAccess({\n        blockPublicAcls: false,\n        blockPublicPolicy: false,\n        ignorePublicAcls: false,\n        restrictPublicBuckets: false,\n      }),\n    }: {\n      publicReadAccess: false, \n    }\n\n    const hostable = isHostable ? {\n      // This is apparently how you do s3 http hosting\n      websiteIndexDocument: 'index.html',\n    }: {\n    }\n\n    const removal = (()=>{\n      switch(removePolicy) {\n        case \"no-delete\":\n          return {}\n        case \"delete-if-empty\":\n          return {\n            removalPolicy: cdk.RemovalPolicy.DESTROY,\n          }\n        case \"empty-and-delete\":\n          return {\n            removalPolicy: cdk.RemovalPolicy.DESTROY,\n            autoDeleteObjects: true,\n          }\n        default:\n          return {}\n      }\n    })()\n    \n    return new s3.Bucket(scope, id, {\n      bucketName: name,\n      ...access,\n      ...hostable,\n      ...removal,\n    })\n  }\n}\n\nexport type S3BucketProps = {\n  name: string\n  isPublic?: boolean\n  // Can the bucket be used to host http access\n  isHostable?: boolean\n  // What should happen when the bucket is removed from the stack\n  removePolicy?: S3BucketRemovePolicy\n}\n\nexport type S3BucketRemovePolicy =\n  // Do not remove the bucket when it's removed from the stack\n  \"no-delete\"\n// Only remove the bucket if it's empty\n  | \"delete-if-empty\"\n// Empty out the bucket and remove it\n  | \"empty-and-delete\"\n"],
  "mappings": "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",
  "names": ["cdk", "appPkgDir"]
}
