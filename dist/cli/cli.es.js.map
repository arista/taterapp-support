{
  "version": 3,
  "sources": ["../../src/cli/commands/cdk/build-code-pipeline.ts", "../../src/lib/utils/cdk/CDKUtils.ts", "../../src/lib/utils/Utils.ts", "../../src/lib/utils/cdk/CDKPermissionsUtils.ts", "../../src/lib/utils/cdk/CDKResourcesUtils.ts", "../../src/lib/cdk/BuildCodePipeline.ts", "../../src/cli/commands/cdk/infrastructure.ts", "../../src/lib/cdk/Infrastructure.ts", "../../src/cli/cli.ts"],
  "sourcesContent": ["import * as OC from \"@oclif/core\"\nimport * as BuildCodePipeline from \"@lib/cdk/BuildCodePipeline\"\n\nexport class Command extends OC.Command {\n  static override description =\n    \"Manages the CDK stack that handles the CodePipeline for building the application\"\n\n  static override args = {\n    \"cdk-command\": OC.Args.string({\n      description: `The CDK command to execute (deploy, destroy, etc.)`,\n      required: true,\n    }),\n  }\n  static override flags = {\n    branch: OC.Flags.string({\n      char: \"b\",\n      description: `The branch for which the pipeline should be created`,\n      required: false,\n      default: \"main\",\n    }),\n  }\n  static override enableJsonFlag = true\n\n  async run() {\n    const {args, flags} = await this.parse(Command)\n    const cdkCommand = args[\"cdk-command\"]\n    const {branch} = flags\n    const stackProps: BuildCodePipeline.StackProps = {branch}\n    await BuildCodePipeline.Stack.runCDKCommand({\n      cdkCommand,\n      stackProps,\n    })\n  }\n}\n", "import {IConstruct} from \"constructs\"\nimport * as cdk from \"aws-cdk-lib\"\nimport * as Utils from \"../Utils\"\nimport {CDKPermissionsUtils} from \"./CDKPermissionsUtils\"\nimport {CDKResourcesUtils} from \"./CDKResourcesUtils\"\n\nexport class CDKUtils {\n  constructor(\n    public props: {\n      scope: IConstruct\n    }\n  ) {}\n\n  get scope() {\n    return this.props.scope\n  }\n\n  _permissions: CDKPermissionsUtils | null = null\n  get permissions(): CDKPermissionsUtils {\n    return (this._permissions ||= (() => {\n      return new CDKPermissionsUtils()\n    })())\n  }\n\n  _resources: CDKResourcesUtils | null = null\n  get resources(): CDKResourcesUtils {\n    return (this._resources ||= (() => {\n      return new CDKResourcesUtils({\n        scope: this.scope,\n      })\n    })())\n  }\n\n  static async runCDKCommand<P extends Object>({\n    appClass,\n    cdkCommand,\n    stackProps,\n  }: {\n    appClass: string\n    cdkCommand: string\n    stackProps: P\n  }): Promise<void> {\n    // This assumes that all the devops-utils code has been rolled up\n    // into build/rollup/index.cjs\n    const pkgdir = Utils.getPackageDirectory()\n    const nodeFile = `${pkgdir}/dist/lib/lib.es.js`\n    const nodeCommand = `node -e \"import('${nodeFile}').then(i=>i.${appClass}.runCDKStack())\"`\n    const timestamp = Utils.dateToYYYYMMDDHHMMSS()\n    const cdkOutputDir = `${pkgdir}/build/cdk.out/${appClass}/${timestamp}`\n\n    const command = \"npx\"\n    const shell = false\n\n    const stackPropsJson: string = JSON.stringify(stackProps)\n    const env: {[name: string]: string} = {\n      CDK_PROPS: stackPropsJson,\n      ...process.env,\n    }\n\n    const args = []\n    args.push(`cdk`)\n    args.push(`--app`, nodeCommand)\n    args.push(`-o`, cdkOutputDir)\n    args.push(cdkCommand)\n    // Don't ask for approval (usually would ask for security-related\n    // changes, like security groups)\n    args.push(`--require-approval`, `never`)\n    // Force a redeploy, even if the template is the same\n    args.push(`--force`)\n    //args.push(`--progress`, `events`)\n\n    return await Utils.runShellCommand({\n      command,\n      args,\n      env,\n      shell,\n      cwd: pkgdir,\n    })\n  }\n\n  static runCDKStack<P>({\n    getStackName,\n    buildStack,\n  }: {\n    getStackName: ({stackProps}: {stackProps: P}) => string\n    buildStack: ({\n      parent,\n      stackProps,\n    }: {\n      parent: IConstruct\n      stackProps: P\n    }) => void\n  }) {\n    const env = JSON.parse(Utils.notNull(process.env[\"CDK_PROPS\"]))\n    const stackProps: P = env\n    const stackName = getStackName({stackProps})\n    const app = new cdk.App()\n    const stack = new cdk.Stack(app, stackName, {\n      // This enables things like looking up hostnames.  Note that\n      // these don't have to be defined as environment variables - CDK\n      // will figure them out itself based on the AWS configuration\n      env: {\n        account: process.env[\"CDK_DEFAULT_ACCOUNT\"],\n        region: process.env[\"CDK_DEFAULT_REGION\"],\n      },\n    })\n    buildStack({parent: stack, stackProps})\n  }\n\n  //--------------------------------------------------\n}\n", "import {packageDirectorySync} from \"pkg-dir\"\nimport * as url from \"node:url\"\nimport child_process from \"node:child_process\"\nimport fs from \"node:fs\"\n\nexport function notNull<T>(val: T | null | undefined, str?: string): T {\n  if (val == null) {\n    if (str == null) {\n      throw new Error(`Assertion failed: value is null`)\n    } else {\n      throw new Error(`Assertion failed: value is null: ${str}`)\n    }\n  }\n  return val\n}\n\nexport function getPackageDirectory(): string {\n  const __filename = url.fileURLToPath(import.meta.url)\n  return notNull(packageDirectorySync({cwd: __filename}))\n}\n\nexport function mapWithIndex<T, R>(\n  items: Iterable<T>,\n  f: (item: T, index: number) => R\n): Array<R> {\n  const ret: Array<R> = []\n  let i = 0\n  for (const item of items) {\n    ret.push(f(item, i))\n    i += 1\n  }\n  return ret\n}\n\nexport async function runShellCommand({\n  command,\n  args,\n  cwd,\n  env,\n  shell,\n}: {\n  command: string\n  args: Array<string>\n  cwd?: string\n  env?: {[name: string]: string}\n  shell?: boolean | string\n}): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const proc = child_process.spawn(command, args, {\n      cwd,\n      env,\n      // Use the same stdin, stdout, stderr as this process\n      stdio: \"inherit\",\n      shell,\n    })\n    proc.on(\"exit\", (code: number | null, signal: string | null) => {\n      if (code === 0) {\n        resolve()\n      } else if (code != null) {\n        reject(new Error(`Process exitted with non-zero code \"${code}\"`))\n      } else if (signal != null) {\n        reject(new Error(`Process terminated with signal \"${signal}\"`))\n      } else {\n        reject(new Error(`Process exitted with no exit code or signal`))\n      }\n    })\n    proc.on(\"error\", (err: Error) => {\n      reject(err)\n    })\n  })\n}\n\nexport function fileExists(path: string): boolean {\n  try {\n    fs.statSync(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport function fileLastModified(path: string): number {\n  return fs.statSync(path).mtimeMs\n}\n\nexport function dateToYYYYMMDDHHMMSS(d: Date = new Date()): string {\n  const yyyy = d.getFullYear().toString().padStart(4, \"0\")\n  const mm = (d.getMonth() + 1).toString().padStart(2, \"0\")\n  const dd = d.getDate().toString().padStart(2, \"0\")\n  const h = d.getHours().toString().padStart(2, \"0\")\n  const m = d.getMinutes().toString().padStart(2, \"0\")\n  const s = d.getSeconds().toString().padStart(2, \"0\")\n  return `${yyyy}-${mm}-${dd}-${h}${m}${s}`\n}\n\nexport function getPathToRoot(path: string): string {\n  if (path.startsWith(\"/\")) {\n    path = path.substring(1)\n  }\n  let ret = \"\"\n  for (const c of path) {\n    if (c === \"/\") {\n      ret += \"../\"\n    }\n  }\n  return ret\n}\n", "import * as iam from \"aws-cdk-lib/aws-iam\"\nimport * as s3 from \"aws-cdk-lib/aws-s3\"\nimport * as ecr from \"aws-cdk-lib/aws-ecr\"\n\nexport type IamPermissions = Array<IamPermission>\n\nexport interface IamPermission {\n  actions: Array<string>\n  resources?: Array<string>\n}\n\nexport class CDKPermissionsUtils {\n  addToRole(role: iam.IRole, permissions: IamPermissions) {\n    for (const permission of permissions) {\n      const policyStatement = new iam.PolicyStatement()\n      policyStatement.addActions(...permission.actions)\n      if (permission.resources != null) {\n        policyStatement.addResources(...permission.resources)\n      }\n      role.addToPrincipalPolicy(policyStatement)\n    }\n  }\n\n  toCreateAndDeleteSqsQueues(): IamPermissions {\n    return [\n      {\n        actions: [\"sqs:CreateQueue\", \"sqs:DeleteQueue\"],\n        resources: [\"arn:aws:sqs:*\"],\n      },\n    ]\n  }\n\n  toReadAndWriteSqsQueues(): IamPermissions {\n    return [\n      {\n        actions: [\"sqs:ReceiveMessage\", \"sqs:DeleteMessage\", \"sqs:SendMessage\"],\n        resources: [\"arn:aws:sqs:*\"],\n      },\n    ]\n  }\n\n  toReadAndWriteS3Bucket(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\n          \"s3:PutObject\",\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:GetObjectAttributes\",\n          // Needed for writing a large file with s3 cp\n          \"s3:AbortMultipartUpload\",\n          \"s3:ListMultipartUploadParts\",\n          \"s3:ListBucketMultipartUploads\",\n          // Needed for copying a large file within s3\n          \"s3:PutObjectTagging\",\n          \"s3:GetObjectTagging\",\n          \"s3:GetObjectVersion\",\n          \"s3:GetObjectVersionTagging\",\n        ],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toReadS3Bucket(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:GetObjectAttributes\",\n          \"s3:GetObjectTagging\",\n          \"s3:GetObjectVersion\",\n          \"s3:GetObjectVersionTagging\",\n        ],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toWriteS3BucketObjects(bucket: s3.IBucket): IamPermissions {\n    return [\n      {\n        actions: [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],\n      },\n    ]\n  }\n\n  toPullECRImages(): IamPermissions {\n    return [\n      {\n        actions: [\n          \"ecr:BatchCheckLayerForAvailability\",\n          \"ecr:BatchGetImage\",\n          \"ecr:GetDownloadUrlForLayer\",\n        ],\n        resources: [\"*\"],\n      },\n    ]\n  }\n\n  toUseCDK(): IamPermissions {\n    // The CDK system operates a little differently from other\n    // permissions.  Wnen you start developing with CDK, you do an\n    // initial \"cdk bootstrap\".  This creates a set of roles in your\n    // account that effectively have administrator access, able to\n    // access everything.  When running CDK, you need to be able to\n    // assume those roles, since a CDK stack could be touching\n    // anything in AWS.\n    //\n    // See https://stackoverflow.com/questions/57118082/what-iam-permissions-are-needed-to-use-cdk-deploy\n    return [\n      {\n        actions: [\"sts:AssumeRole\"],\n        resources: [\"arn:aws:iam::*:role/cdk-*\"],\n      },\n      {\n        actions: [\"sts:PassRole\"],\n        resources: [\"*\"],\n      },\n      // Taking down a CDK stack (effectively a cloudformation stack)\n      // requires a separate permission\n      {\n        actions: [\"cloudformation:DeleteStack\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toReadCDKOutputs(): IamPermissions {\n    return [\n      {\n        actions: [\"cloudformation:DescribeStacks\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toLoginToECR(): IamPermissions {\n    return [\n      {\n        actions: [\"ecr:GetAuthorizationToken\"],\n        resources: [`*`],\n      },\n    ]\n  }\n\n  toPushToECR(repositories: Array<ecr.IRepository>): IamPermissions {\n    return [\n      {\n        actions: [\n          \"ecr:CompleteLayerUpload\",\n          \"ecr:UploadLayerPart\",\n          \"ecr:InitiateLayerUpload\",\n          \"ecr:BatchCheckLayerAvailability\",\n          \"ecr:PutImage\",\n        ],\n        resources: repositories.map((r) => r.repositoryArn),\n      },\n    ]\n  }\n\n  toUpdateLambdaCode(functionName: string): IamPermissions {\n    return [\n      {\n        actions: [\"lambda:UpdateFunctionCode\", \"lambda:GetFunction\"],\n        resources: [`arn:aws:lambda:*:*:function:${functionName}`],\n      },\n    ]\n  }\n}\n", "import {IConstruct} from \"constructs\"\nimport * as ssm from \"aws-cdk-lib/aws-ssm\"\nimport * as cdk from \"aws-cdk-lib\"\n\nexport class CDKResourcesUtils {\n  constructor(\n    public props: {\n      scope: IConstruct\n    }\n  ) {}\n\n  get scope() {\n    return this.props.scope\n  }\n\n  _ssmStringParams: CachedResources<string> | null = null\n  get ssmStringParams(): CachedResources<string> {\n    return (this._ssmStringParams ||= (() => {\n      return new CachedResources((name) => {\n        return ssm.StringParameter.valueForStringParameter(this.scope, name)\n      })\n    })())\n  }\n\n  _ssmSecureStringParams: CachedResources<string> | null = null\n  get ssmSecureStringParams(): CachedResources<string> {\n    return (this._ssmSecureStringParams ||= (() => {\n      return new CachedResources((name) => {\n        // The version must be specified for secure SSM params, and\n        // must be changed if the value changes\n        const version = 1\n        return ssm.StringParameter.valueForSecureStringParameter(\n          this.scope,\n          `ssm-secureparam-${name}`,\n          version\n        )\n      })\n    })())\n  }\n\n  // Returns the token corresponding to the name of the S3 bucket used\n  // to hold codepipeline artifacts\n  get artifactBucketName() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/artifact-bucket-name\"\n    )\n  }\n\n  // Returns the token corresponding to the codeconnection arn used to\n  // interact with github\n  get codestarConnectionArn() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/codestar-connection-arn\"\n    )\n  }\n\n  // Returns the token corresponding to the dockerhub login used to\n  // pull base images when building docker images.  Using a login\n  // helps with the dockerhub rate limits.\n  get dockerhubAccountId() {\n    return this.ssmStringParams.get(\n      \"/taterapps/common/build/dockerhub-account/id\"\n    )\n  }\n\n  // Returns the token corresponding to the dockerhub password for the\n  // dockerhubAccountId\n  get dockerhubAccountPassword() {\n    return this.ssmSecureStringParams.get(\n      \"/taterapps/common/build/dockerhub-account/password\"\n    )\n  }\n}\n\nclass CachedResources<T> {\n  byName: {[name: string]: T} = {}\n  constructor(public createFunc: (name: string) => T) {}\n  get(name: string): T {\n    return (this.byName[name] ||= (() => this.createFunc(name))())\n  }\n}\n", "import {CDKUtils} from \"@lib/utils/cdk/CDKUtils\"\nimport * as Utils from \"@lib/utils/Utils\"\nimport {Construct, IConstruct} from \"constructs\"\nimport * as cdk from \"aws-cdk-lib\"\nimport * as cp from \"aws-cdk-lib/aws-codepipeline\"\nimport * as cp_actions from \"aws-cdk-lib/aws-codepipeline-actions\"\nimport * as cb from \"aws-cdk-lib/aws-codebuild\"\nimport * as s3 from \"aws-cdk-lib/aws-s3\"\n\nexport interface StackProps {\n  branch: string\n}\n\nexport class Stack extends Construct {\n  constructor(scope: IConstruct, id: string, stackProps: StackProps) {\n    super(scope, id)\n    const {branch} = stackProps\n    const sourceOutput = new cp.Artifact()\n    const cdkUtils = new CDKUtils({scope: this})\n    const owner = \"arista\"\n    const repo = \"taterapp-template\"\n\n    const codebuildProject = new cb.PipelineProject(\n      this,\n      \"TaterappTemplate-BuildCodePipeline\",\n      {\n        projectName: `TaterappTemplate-Build-${branch}`,\n        environment: {\n          buildImage: cb.LinuxBuildImage.AMAZON_LINUX_2_5,\n          computeType: cb.ComputeType.LARGE,\n        },\n        timeout: cdk.Duration.minutes(120),\n        buildSpec: cb.BuildSpec.fromObject({\n          version: \"0.2\",\n          phases: {\n            build: {\n              commands: (() => {\n                const ret = [`bin/aws/codepipeline-build`]\n                return ret\n              })(),\n            },\n          },\n        }),\n      }\n    )\n    cdkUtils.permissions.addToRole(Utils.notNull(codebuildProject.role), [\n      //      ...cdkUtils.permissions.toWriteS3BucketObjects(privateBucket),\n      //      ...cdkUtils.permissions.toWriteS3BucketObjects(publicBucket),\n\n      // To deploy the lambda code\n      //      ...cdkUtils.permissions.toReadS3Bucket(privateBucket),\n      ...cdkUtils.permissions.toUpdateLambdaCode(\"TaterappTemplate-Webapp\"),\n    ])\n\n    const artifactBucket = s3.Bucket.fromBucketName(\n      this,\n      \"ArtifactBucket\",\n      cdkUtils.resources.artifactBucketName\n    )\n    const pipeline = new cp.Pipeline(this, \"TaterappTemplateBuildPipeline\", {\n      pipelineName: `TaterappTemplateBuild-${branch}`,\n      artifactBucket,\n      pipelineType: cp.PipelineType.V2,\n      stages: [\n        {\n          stageName: \"Source\",\n          actions: [\n            new cp_actions.CodeStarConnectionsSourceAction({\n              actionName: \"Source\",\n              connectionArn: cdkUtils.resources.codestarConnectionArn,\n              owner,\n              repo,\n              branch,\n              output: sourceOutput,\n              variablesNamespace: \"SourceVars\",\n            }),\n          ],\n        },\n        {\n          stageName: \"Build\",\n          actions: [\n            new cp_actions.CodeBuildAction({\n              actionName: \"Build\",\n              input: sourceOutput,\n              project: codebuildProject,\n              variablesNamespace: \"BuildVars\",\n              environmentVariables: {\n                PIPELINE_EXECUTION_ID: {\n                  value: \"#{codepipeline.PipelineExecutionId}\",\n                },\n                GITHUB_COMMIT_ID: {value: \"#{SourceVars.CommitId}\"},\n                GITHUB_BRANCH_NAME: {value: \"#{SourceVars.BranchName}\"},\n              },\n            }),\n          ],\n        },\n      ],\n    })\n  }\n\n  static runCDKStack() {\n    CDKUtils.runCDKStack<StackProps>({\n      getStackName: ({stackProps}) => {\n        const {branch} = stackProps\n        return `TaterappTemplate-BuildCodePipeline-${branch}`\n      },\n      buildStack: ({parent, stackProps}) => {\n        new Stack(parent, \"TaterappTemplate-BuildCodePipeline\", stackProps)\n      },\n    })\n  }\n\n  static runCDKCommand(props: {cdkCommand: string; stackProps: StackProps}) {\n    CDKUtils.runCDKCommand({\n      appClass: \"BuildCodePipeline.Stack\",\n      ...props,\n    })\n  }\n}\n\nexport interface StackProps {}\n", "import * as OC from \"@oclif/core\"\nimport * as Infrastructure from \"@lib/cdk/Infrastructure\"\n\nexport class Command extends OC.Command {\n  static override description =\n    \"Manages the CDK stack that handles the Taterapp infrastructur\"\n\n  static override args = {\n    \"cdk-command\": OC.Args.string({\n      description: `The CDK command to execute (deploy, destroy, etc.)`,\n      required: true,\n    }),\n  }\n  static override flags = {\n  }\n  static override enableJsonFlag = true\n\n  async run() {\n    const {args, flags} = await this.parse(Command)\n    const cdkCommand = args[\"cdk-command\"]\n    const stackProps: Infrastructure.StackProps = {}\n    await Infrastructure.Stack.runCDKCommand({\n      cdkCommand,\n      stackProps,\n    })\n  }\n}\n", "// Creates the AWS infrastructure elements shared by multiple Taterapps\n\nimport {CDKUtils} from \"@lib/utils/cdk/CDKUtils\"\nimport * as Utils from \"@lib/utils/Utils\"\nimport {Construct, IConstruct} from \"constructs\"\nimport * as cdk from \"aws-cdk-lib\"\nimport * as cp from \"aws-cdk-lib/aws-codepipeline\"\nimport * as cp_actions from \"aws-cdk-lib/aws-codepipeline-actions\"\nimport * as cb from \"aws-cdk-lib/aws-codebuild\"\nimport * as s3 from \"aws-cdk-lib/aws-s3\"\n\nexport interface StackProps {\n}\n\nexport class Stack extends Construct {\n  constructor(scope: IConstruct, id: string, stackProps: StackProps) {\n    super(scope, id)\n    const cdkUtils = new CDKUtils({scope: this})\n\n    // The private bucket for holding codepipeline artifacts\n    new s3.Bucket(this, \"CodePipelineArtifactsBucket\", {\n      bucketName: \"taterapps-cp-artifacts\",\n      publicReadAccess: false,\n    })    \n\n    // The private bucket for holding data for Taterapps\n    new s3.Bucket(this, \"PrivateBucket\", {\n      bucketName: \"taterapps-private\",\n      publicReadAccess: false,\n    })    \n\n    // The public bucket for hosting Taterapps assets, etc.\n    new s3.Bucket(this, \"PublicBucket\", {\n      bucketName: \"taterapps-public\",\n\n      // Allow public access\n      publicReadAccess: true,\n      blockPublicAccess: new s3.BlockPublicAccess({\n        blockPublicAcls: false,\n        blockPublicPolicy: false,\n        ignorePublicAcls: false,\n        restrictPublicBuckets: false,\n      }),\n\n      // Adding this makes the bucket hostable\n      websiteIndexDocument: 'index.html',\n    })    \n  }\n\n  static runCDKStack() {\n    CDKUtils.runCDKStack<StackProps>({\n      getStackName: ({stackProps}) => {\n        return `TaterappSupport-Infrastructure`\n      },\n      buildStack: ({parent, stackProps}) => {\n        new Stack(parent, \"TaterappSupport-Infrastructure\", stackProps)\n      },\n    })\n  }\n\n  static runCDKCommand(props: {cdkCommand: string; stackProps: StackProps}) {\n    CDKUtils.runCDKCommand({\n      appClass: \"Infrastructure.Stack\",\n      ...props,\n    })\n  }\n}\n\nexport interface StackProps {}\n", "// The oclif commands making up the CLI\n\nimport {Command as BuildCodePipelineCommand} from \"./commands/cdk/build-code-pipeline\"\nimport {Command as InfrastructureCommand} from \"./commands/cdk/infrastructure\"\n\nexport const COMMANDS = {\n  \"cdk:build-code-pipeline\": BuildCodePipelineCommand,\n  \"cdk:infrastructure\": InfrastructureCommand,\n}\n"],
  "mappings": "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",
  "names": ["cdk", "Stack", "Command", "Stack", "OC", "Construct", "s3", "Stack", "Command", "Stack", "Command"]
}
